
Le entità di cui avrò bisogno nel mio database sono:

- User
- Paper
- Grade
- Reviewer 

Relazioni:

L'entità 'User' avrà una cardinalità di uno a molti nei confronti di 'Paper' in quanto ogni utente può teoricamente avere più di un articolo.
L'entità 'Paper' avrà una cardinalità di molti ad uno nei confronti di 'User' in quanto possono corrispondere più articoli ad una sola persona.
L'entità 'Paper' avrà una cardinalità di uno ad uno nei confronti di 'Grade' in quanto ogni articolo ammette una sola valutazione finale.
L'entità 'Paper' avrà una cardinalità di tipo uno a molti nei confronti di 'Reviewer' in quanto possono essere assegnati diversi valutatori ad ogni articolo.
L'entità 'Grade' avrà una cardinalità di tipo uno ad uno nei confronti di 'Paper' in quanto ogni articolo ammette una sola valutazione.
L'entità 'reviewer' avrà una cardinalità di tipo molti a molti nei confronti di 'Paper' in quanto tutte le paper possono essere valutate da più utenti. 

table user (
	#id_user serial,
	name varchar,
	surname varchar,
	email varchar,
	password varchar,
	birthDate date,
	entity varchar,
	organizer tinyint,
    author tinyint
)

table paper (
	#id_paper serial,
	id_user bigint, // foreign key
	title varchar,
	submissionDate date,
	content varchar,
	picture varchar,
	category varchar,
	status varchar
)

table grade (
	#id_paper bigint, // foreign key
	#grade tinyint,
	isGraded tinyint,   
    gradingDate date,
	authorComments varchar,
	organizerComments varchar
)

table reviewer	 (
	#id_paper bigint, // foreign key
	#id_user bigint, // foreign key
)

Utilizzo al tabella user sia per utenti che per gestore in quanto non ritengo opportuno creare una tabella a parte per un solo
campo. Aggiungo il valore booleano (tinyint) organizer per denotarlo e differenziarlo dagli altri
